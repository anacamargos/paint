/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabalhocg;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import static trabalhocg.OpcoesBotoes.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JColorChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

/**
 *
 * @author anacamargos
 */
public class Tela extends javax.swing.JFrame {

    /**
     * Creates new form Tela
     */
    
    OpcoesBotoes opcao = RETA_DDA;
    boolean jaFoiClicado = false;
    int x1,x2,y1,y2;
    ArrayList<Reta> retasNaTela = new ArrayList();
    //ArrayList<Circunferencia> circNaTela = new ArrayList();
    
    public Tela() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        area = new MyPannel();
        barraMenu = new javax.swing.JMenuBar();
        botaoReta = new javax.swing.JMenu();
        botaoDda = new javax.swing.JMenuItem();
        botaoBresen = new javax.swing.JMenuItem();
        botaoCirc = new javax.swing.JMenu();
        botaoBresenhamCirc = new javax.swing.JMenuItem();
        botaoTrans = new javax.swing.JMenu();
        botaoTranslacao = new javax.swing.JMenuItem();
        botaoEscala = new javax.swing.JMenuItem();
        botaoRotacao = new javax.swing.JMenuItem();
        botaoReflexaoX = new javax.swing.JMenuItem();
        botaoReflexaoY = new javax.swing.JMenuItem();
        botaoReflexaoOrigem = new javax.swing.JMenuItem();
        botaoCisalhamentoX = new javax.swing.JMenuItem();
        botaoCisalhamentoY = new javax.swing.JMenuItem();
        botaoJanela = new javax.swing.JMenu();
        botaoCohen = new javax.swing.JMenuItem();
        botaoLiang = new javax.swing.JMenuItem();
        botaoPreenchimento = new javax.swing.JMenu();
        boundaryFill = new javax.swing.JMenuItem();
        floodFill = new javax.swing.JMenuItem();
        limpar = new javax.swing.JMenu();
        liparTela = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        area.setBackground(new java.awt.Color(255, 255, 255));
        area.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                areaMousePressed(evt);
            }
        });

        javax.swing.GroupLayout areaLayout = new javax.swing.GroupLayout(area);
        area.setLayout(areaLayout);
        areaLayout.setHorizontalGroup(
            areaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1157, Short.MAX_VALUE)
        );
        areaLayout.setVerticalGroup(
            areaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 746, Short.MAX_VALUE)
        );

        barraMenu.setPreferredSize(new java.awt.Dimension(435, 30));

        botaoReta.setText("Retas");

        botaoDda.setText("DDA");
        botaoDda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDdaActionPerformed(evt);
            }
        });
        botaoReta.add(botaoDda);

        botaoBresen.setText("Bresenham");
        botaoBresen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBresenActionPerformed(evt);
            }
        });
        botaoReta.add(botaoBresen);

        barraMenu.add(botaoReta);

        botaoCirc.setText("Cinrcunferencia");

        botaoBresenhamCirc.setText("Bresenham");
        botaoBresenhamCirc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBresenhamCircActionPerformed(evt);
            }
        });
        botaoCirc.add(botaoBresenhamCirc);

        barraMenu.add(botaoCirc);

        botaoTrans.setText("Transformações");

        botaoTranslacao.setText("Translação");
        botaoTranslacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoTranslacaoActionPerformed(evt);
            }
        });
        botaoTrans.add(botaoTranslacao);

        botaoEscala.setText("Escala");
        botaoEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEscalaActionPerformed(evt);
            }
        });
        botaoTrans.add(botaoEscala);

        botaoRotacao.setText("Rotação");
        botaoRotacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRotacaoActionPerformed(evt);
            }
        });
        botaoTrans.add(botaoRotacao);

        botaoReflexaoX.setText("Reflexão - Eixo X");
        botaoReflexaoX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoReflexaoXActionPerformed(evt);
            }
        });
        botaoTrans.add(botaoReflexaoX);

        botaoReflexaoY.setText("Reflexão - Eixo Y");
        botaoReflexaoY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoReflexaoYActionPerformed(evt);
            }
        });
        botaoTrans.add(botaoReflexaoY);

        botaoReflexaoOrigem.setText("Reflexão - Origem");
        botaoReflexaoOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoReflexaoOrigemActionPerformed(evt);
            }
        });
        botaoTrans.add(botaoReflexaoOrigem);

        botaoCisalhamentoX.setText("Cisalhamento - Eixo X");
        botaoCisalhamentoX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCisalhamentoXActionPerformed(evt);
            }
        });
        botaoTrans.add(botaoCisalhamentoX);

        botaoCisalhamentoY.setText("Cisalhamento - Eixo Y");
        botaoCisalhamentoY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCisalhamentoYActionPerformed(evt);
            }
        });
        botaoTrans.add(botaoCisalhamentoY);

        barraMenu.add(botaoTrans);

        botaoJanela.setText("Janela de Visualização");

        botaoCohen.setText("Cohen-Sutherland");
        botaoCohen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCohenActionPerformed(evt);
            }
        });
        botaoJanela.add(botaoCohen);

        botaoLiang.setText("Liang-Barsky");
        botaoLiang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLiangActionPerformed(evt);
            }
        });
        botaoJanela.add(botaoLiang);

        barraMenu.add(botaoJanela);

        botaoPreenchimento.setText("Preenchimento");

        boundaryFill.setText("Boundary-Fill");
        boundaryFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boundaryFillActionPerformed(evt);
            }
        });
        botaoPreenchimento.add(boundaryFill);

        floodFill.setText("Flood-Fill");
        floodFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floodFillActionPerformed(evt);
            }
        });
        botaoPreenchimento.add(floodFill);

        barraMenu.add(botaoPreenchimento);

        limpar.setText("Limpar");
        limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparActionPerformed(evt);
            }
        });

        liparTela.setText("Limpar Tela");
        liparTela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                liparTelaActionPerformed(evt);
            }
        });
        limpar.add(liparTela);

        barraMenu.add(limpar);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoDdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDdaActionPerformed
        opcao = RETA_DDA;
    }//GEN-LAST:event_botaoDdaActionPerformed

    private void areaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaMousePressed
        //System.out.println("O valor de jaFoiClicado é: " + jaFoiClicado);
            if (jaFoiClicado == false) {
                jaFoiClicado = true;
                x1 = evt.getX();
                y1 = evt.getY();
                //System.out.println("Oi to pegando x1");
                
                switch (opcao) {
                    
                    case PREENCHIMENTO_BOUNDARY:
                        //System.out.println("Entrei aqui no boundary fill");
                        Reta.boundaryFill4(x1,y1, Color.BLACK.getRGB(), Color.BLACK.getRGB(), area.getBuffer());
                        area.atualizar();
                        jaFoiClicado = false;
                        break;

                    case PREENCHIMENTO_FLOOD:
                        Reta.floodFill4(x1,y1, Color.WHITE.getRGB(), Color.BLACK.getRGB(), area.getBuffer());
                        area.atualizar();
                        jaFoiClicado = false;
                        break;
                }
                
            } else {
                //System.out.println("Oi to pegando x2");
                jaFoiClicado = false;
                x2 = evt.getX();
                y2 = evt.getY();

                switch ( opcao ) {

                    case RETA_DDA:
                        Reta novaReta = new Reta (x1, y1, x2, y2);
                        retasNaTela.add(novaReta);
                        novaReta.dda( x1, y1, x2, y2, area.getBuffer(), Color.BLACK.getRGB() );
                        area. atualizar();
                        break;

                    case RETA_BRESENHAM:
                        Reta nova = new Reta(x1, y1, x2, y2);
                        retasNaTela.add(nova);
                        nova.bresenham( x1, y1, x2, y2, area.getBuffer() );
                        area. atualizar();
                        break;

                    case CIRCUNF_BRESENHAM:
                        Circunferencia novaCirc = new Circunferencia();
                        //circNaTela.add(novaCirc);
                        novaCirc.bresenham( x1, y1, x2, y2, area.getBuffer() );
                        area. atualizar();

                        break;
                        
                    case JANELA_COHEN:
                        
                        Reta r1 = new Reta(x1,y2,x2,y2);
                        Reta r2 = new Reta(x2,y2,x2,y1);
                        Reta r3 = new Reta(x1,y1,x2,y1);
                        Reta r4 = new Reta(x1,y2,x1,y1);
                        
                        int x1Jan = x1;
                        int y1Jan = y1;
                        int x2Jan = x2;
                        int y2Jan = y2;
                   
                        
                        area.repaint();
                        area.limpa();
                        
                        r1.dda( x1, y2, x2, y2, area.getBuffer(), Color.BLUE.getRGB() );
                        r2.dda( x2, y2, x2, y1, area.getBuffer(), Color.BLUE.getRGB() );
                        r3.dda( x1, y1, x2, y1, area.getBuffer(), Color.BLUE.getRGB() );
                        r4.dda( x1, y2, x1, y1, area.getBuffer(), Color.BLUE.getRGB() );
                        area. atualizar();
                        
                        for (int i = 0; i < retasNaTela.size(); i ++) {
                            Reta r = retasNaTela.get(i);
                            
                            x1 = r.getX1();
                            y1 = r.getY1();
                            x2 = r.getX2();
                            y2 = r.getY2();
                            
                            r.cohenSutherland(x1, y1, x2, y2, x1Jan, y1Jan, x2Jan, y2Jan, area.getBuffer());
                        }

                        break; 

                    case JANELA_LIAN:
                        
                        //System.out.println("Entrei no LIANNNGGG");
                        Reta r5 = new Reta(x1,y2,x2,y2);
                        Reta r6 = new Reta(x2,y2,x2,y1);
                        Reta r7 = new Reta(x1,y1,x2,y1);
                        Reta r8 = new Reta(x1,y2,x1,y1);
                        
                        int x1Lian = x1;
                        int y1Lian = y1;
                        int x2Lian = x2;
                        int y2Lian = y2;
                        
                        area.repaint();
                        area.limpa();
                        
                        r5.dda( x1, y2, x2, y2, area.getBuffer(), Color.RED.getRGB() );
                        r6.dda( x2, y2, x2, y1, area.getBuffer(), Color.RED.getRGB() );
                        r7.dda( x1, y1, x2, y1, area.getBuffer(), Color.RED.getRGB() );
                        r8.dda( x1, y2, x1, y1, area.getBuffer(), Color.RED.getRGB() );
                        area. atualizar();
                        
                        for (int i = 0; i < retasNaTela.size(); i ++) {
                            Reta r = retasNaTela.get(i);
                            
                            x1 = r.getX1();
                            y1 = r.getY1();
                            x2 = r.getX2();
                            y2 = r.getY2();
                            
                            //System.out.println("To passando: " + x1 + " " + y1 + ", " + x2 + " " + y2);
                            
                            r.liang(x1, y1, x2, y2, x1Lian, y1Lian, x2Lian, y2Lian, area.getBuffer());
                        }

                        break;

                    
                        
                    default:
                        System.out.println("Você deve apertar alguma soluçao");
                }
            }
    }//GEN-LAST:event_areaMousePressed

    private void botaoBresenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBresenActionPerformed
        opcao = RETA_BRESENHAM;
    }//GEN-LAST:event_botaoBresenActionPerformed

    private void botaoBresenhamCircActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBresenhamCircActionPerformed
        opcao = CIRCUNF_BRESENHAM;
    }//GEN-LAST:event_botaoBresenhamCircActionPerformed

    private void botaoTranslacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoTranslacaoActionPerformed
        //System.out.println("Oi entrei em translacao");
        if (!retasNaTela.isEmpty()) {
            JPanel p = new JPanel(new BorderLayout(5, 5));
            JPanel labels = new JPanel(new GridLayout(0, 1, 2, 2));
            labels.add(new JLabel("Fator a:", SwingConstants.RIGHT));
            labels.add(new JLabel("Fator b:", SwingConstants.RIGHT));
            p.add(labels, BorderLayout.WEST);
           

            JPanel controls = new JPanel(new GridLayout(0, 1, 2, 2));
            JTextField a = new JTextField();
            JTextField b = new JTextField();
            controls.add(a);
            controls.add(b);
            p.add(controls, BorderLayout.CENTER);

            JOptionPane.showMessageDialog(area, p, "Translação", JOptionPane.QUESTION_MESSAGE);
            int valorA = Integer.parseInt(a.getText());
            int valorB = Integer.parseInt(b.getText());
            
            area.repaint();
            area.limpa();
            
            for (int i = 0; i < retasNaTela.size(); i ++){
                Reta r = retasNaTela.get(i);
                r.setX1(r.getX1() + valorA);
                r.setX2(r.getX2()+ valorA);
                r.setY1(r.getY1()+ valorB);
                r.setY2(r.getY2()+ valorB);
                r.dda(r.getX1(), r.getY1(), r.getX2(), r.getY2(), area.getBuffer(), Color.BLACK.getRGB());
                //r.dda(r.getX1() + valorA, r.getY1()+ valorB, r.getX2()+ valorA, r.getY2()+ valorB, area.getBuffer());
                area. atualizar();
            }
            System.out.println("O tamanho de retasNaTela é: " + retasNaTela.size());
            //circNaTela.clear();
            
        } else {
            //FALAR PRA DESENHAR RETA
            JPanel p1 = new JPanel(new BorderLayout(5, 5));
            JPanel labels1 = new JPanel(new GridLayout(0, 1, 2, 2));
            labels1.add(new JLabel("Desenhe uma reta na tela antes de tentar fazer essa transformação", SwingConstants.CENTER));
            p1.add(labels1,BorderLayout.WEST);
            JOptionPane.showMessageDialog(area,p1,"Messagem de erro", JOptionPane.QUESTION_MESSAGE);
        }
    }//GEN-LAST:event_botaoTranslacaoActionPerformed

    private void botaoEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEscalaActionPerformed
        System.out.println("Oi entrei em escala");
        if (!retasNaTela.isEmpty()) {
            JPanel p = new JPanel(new BorderLayout(5, 5));
            JPanel labels = new JPanel(new GridLayout(0, 1, 2, 2));
            labels.add(new JLabel("Fator a:", SwingConstants.RIGHT));
            labels.add(new JLabel("Fator b:", SwingConstants.RIGHT));
            p.add(labels, BorderLayout.WEST);
           

            JPanel controls = new JPanel(new GridLayout(0, 1, 2, 2));
            JTextField a = new JTextField();
            JTextField b = new JTextField();
            controls.add(a);
            controls.add(b);
            p.add(controls, BorderLayout.CENTER);

            JOptionPane.showMessageDialog(area, p, "Escala", JOptionPane.QUESTION_MESSAGE);
            double valorA = Double.parseDouble(a.getText());
            double valorB = Double.parseDouble(b.getText());
            
            area.repaint();
            area.limpa();
            
            for (int i = 0; i < retasNaTela.size(); i ++){
                Reta r = retasNaTela.get(i);
                
                x1 = r.getX1();
                x2 = r.getX2();
                y1 = r.getY1();
                y2 = r.getY2();
                
                int deltaX = x2 - x1;
                int deltaY = y2 - y1;
                
                int novox2 = (int)(Math.round(deltaX * valorA));
                int novoy2 = (int)(Math.round(deltaY * valorB));
                
                r.dda(x1, y1, novox2 + x1, novoy2 + y1, area.getBuffer(), Color.BLACK.getRGB());
                
                r.setX2(novox2 + x1);
                r.setY2(novoy2 + y1);
                
                area. atualizar();
            }
            System.out.println("O tamanho de retasNaTela é: " + retasNaTela.size());
            //circNaTela.clear();
            
        } else {
            //FALAR PRA DESENHAR RETA
            JPanel p1 = new JPanel(new BorderLayout(5, 5));
            JPanel labels1 = new JPanel(new GridLayout(0, 1, 2, 2));
            labels1.add(new JLabel("Desenhe uma reta na tela antes de tentar fazer essa transformação", SwingConstants.CENTER));
            p1.add(labels1,BorderLayout.WEST);
            JOptionPane.showMessageDialog(area,p1,"Messagem de erro", JOptionPane.QUESTION_MESSAGE);
        }
    }//GEN-LAST:event_botaoEscalaActionPerformed

    private void botaoRotacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRotacaoActionPerformed
        System.out.println("Oi entrei em rotacao");
        if (!retasNaTela.isEmpty()) {
            JPanel p = new JPanel(new BorderLayout(5, 5));
            JPanel labels = new JPanel(new GridLayout(0, 1, 2, 2));
            labels.add(new JLabel("Grau:", SwingConstants.RIGHT));
            //labels.add(new JLabel("Fator de translação b:", SwingConstants.RIGHT));
            p.add(labels, BorderLayout.WEST);
           

            JPanel controls = new JPanel(new GridLayout(0, 1, 2, 2));
            JTextField a = new JTextField();
            controls.add(a);
            p.add(controls, BorderLayout.CENTER);

            JOptionPane.showMessageDialog(area, p, "Rotação", JOptionPane.QUESTION_MESSAGE);
            int grau = Integer.parseInt(a.getText());
            
            area.repaint();
            area.limpa();
            
            double grauRad = Math.toRadians(grau);
            double sinGrauRad = Math.sin(grauRad);
            double cosGrauRad = Math.cos(grauRad);
            
            System.out.println("Seno de " + grau + " é: " + Math.sin(grauRad));
            System.out.println("Cosseno de " + grau + " é: " + Math.cos(grauRad));
            
            
            
            for (int i = 0; i < retasNaTela.size(); i ++) {
                Reta r = retasNaTela.get(i);
                
                x1 = r.getX1();
                x2 = r.getX2();
                y1 = r.getY1();
                y2 = r.getY2();
                
                int deltaX = x2 - x1;
                int deltaY = y2 - y1;
                
                //r.dda(0, 0, deltaX, deltaY, area.getBuffer());
                
                int novox2 =(int)(deltaX*cosGrauRad - deltaY*sinGrauRad) ;
                int novoy2 = (int)(deltaX*sinGrauRad + deltaY*cosGrauRad);
                
                //r.dda(0, 0, novox2, novoy2, area.getBuffer());
                
                //r.dda(x1, y1, x2, y2, area.getBuffer());
                r.dda(x1, y1, novox2 + x1, novoy2 + y1, area.getBuffer(), Color.BLACK.getRGB());
                
                r.setX2(novox2 + x1);
                r.setY2(novoy2 + y1);
                
                area.atualizar();
                
            }
            //System.out.println("O tamanho de retasNaTela é: " + retasNaTela.size());
            
        } else {
            //FALAR PRA DESENHAR RETA
            JPanel p1 = new JPanel(new BorderLayout(5, 5));
            JPanel labels1 = new JPanel(new GridLayout(0, 1, 2, 2));
            labels1.add(new JLabel("Desenhe uma reta na tela antes de tentar fazer essa transformação", SwingConstants.CENTER));
            p1.add(labels1,BorderLayout.WEST);
            JOptionPane.showMessageDialog(area,p1,"Messagem de erro", JOptionPane.QUESTION_MESSAGE);
        }
    }//GEN-LAST:event_botaoRotacaoActionPerformed

    private void botaoReflexaoXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoReflexaoXActionPerformed
        if (!retasNaTela.isEmpty()) {
            area.repaint();
            area.limpa();
        
            for (int i = 0; i < retasNaTela.size(); i ++) {
            
                Reta r = retasNaTela.get(0);
                x1 = r.getX1();
                x2 = r.getX2();
                y1 = r.getY1();
                y2 = r.getY2();
            
                int deltaX = (x2 - x1);
                int deltaY = (y2 - y1) * -1;

                int novoX2 = deltaX + x1;
                int novoY2 = deltaY + y1;

                r.dda(x1, y1, novoX2, novoY2, area.getBuffer(), Color.BLACK.getRGB());
                r.setX2(novoX2);
                r.setY2(novoY2);

                area.atualizar();


            }
        } else {
            JPanel p1 = new JPanel(new BorderLayout(5, 5));
            JPanel labels1 = new JPanel(new GridLayout(0, 1, 2, 2));
            labels1.add(new JLabel("Desenhe uma reta na tela antes de tentar fazer essa transformação", SwingConstants.CENTER));
            p1.add(labels1,BorderLayout.WEST);
            JOptionPane.showMessageDialog(area,p1,"Messagem de erro", JOptionPane.QUESTION_MESSAGE);
            
        }
        
        
    }//GEN-LAST:event_botaoReflexaoXActionPerformed

    private void botaoCisalhamentoXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCisalhamentoXActionPerformed
        if (!retasNaTela.isEmpty()) {
            
            JPanel p = new JPanel(new BorderLayout(5, 5));
            JPanel labels = new JPanel(new GridLayout(0, 1, 2, 2));
            labels.add(new JLabel("Fator:", SwingConstants.RIGHT));
            p.add(labels, BorderLayout.WEST);
           

            JPanel controls = new JPanel(new GridLayout(0, 1, 2, 2));
            JTextField a = new JTextField();
            controls.add(a);
            p.add(controls, BorderLayout.CENTER);

            JOptionPane.showMessageDialog(area, p, "Cisalhamento", JOptionPane.QUESTION_MESSAGE);
            int fatorCisalhamento = Integer.parseInt(a.getText());
            
            area.repaint();
            area.limpa();
        
            for (int i = 0; i < retasNaTela.size(); i ++) {
            
                Reta r = retasNaTela.get(0);
                x1 = r.getX1();
                x2 = r.getX2();
                y1 = r.getY1();
                y2 = r.getY2();
            
                int deltaY = (y2 - y1);
                int deltaX = (x2 - x1);
 
                int novoX2 = deltaX + fatorCisalhamento*deltaY;
                int novoY2 = deltaY;
                
                //r.dda(0, 0, novoX2, novoY2, area.getBuffer());

                r.dda(x1, y1, novoX2 + x1, novoY2 + y1, area.getBuffer(), Color.BLACK.getRGB());
                r.setX2(novoX2 + x1);
                r.setY2(novoY2 + y1);

                area.atualizar();


            }
            
        } else {
            JPanel p1 = new JPanel(new BorderLayout(5, 5));
            JPanel labels1 = new JPanel(new GridLayout(0, 1, 2, 2));
            labels1.add(new JLabel("Desenhe uma reta na tela antes de tentar fazer essa transformação", SwingConstants.CENTER));
            p1.add(labels1,BorderLayout.WEST);
            JOptionPane.showMessageDialog(area,p1,"Messagem de erro", JOptionPane.QUESTION_MESSAGE);
            
        }
        
    }//GEN-LAST:event_botaoCisalhamentoXActionPerformed

    private void botaoCohenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCohenActionPerformed
        opcao = JANELA_COHEN;
    }//GEN-LAST:event_botaoCohenActionPerformed

    private void botaoLiangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLiangActionPerformed
        opcao = JANELA_LIAN;
    }//GEN-LAST:event_botaoLiangActionPerformed

    private void limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparActionPerformed
        area.repaint();
    }//GEN-LAST:event_limparActionPerformed

    private void liparTelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_liparTelaActionPerformed
        area.repaint();
        area.limpa();
        retasNaTela.clear();
        //circNaTela.clear();
    }//GEN-LAST:event_liparTelaActionPerformed

    private void botaoReflexaoYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoReflexaoYActionPerformed
        if (!retasNaTela.isEmpty()) {
            area.repaint();
            area.limpa();
        
            for (int i = 0; i < retasNaTela.size(); i ++) {
            
                Reta r = retasNaTela.get(0);
                x1 = r.getX1();
                x2 = r.getX2();
                y1 = r.getY1();
                y2 = r.getY2();
            
                int deltaX = (x2 - x1) * -1;
                int deltaY = (y2 - y1);

                int novoX2 = deltaX + x1;
                int novoY2 = deltaY + y1;

                r.dda(x1, y1, novoX2, novoY2, area.getBuffer(), Color.BLACK.getRGB());
                r.setX2(novoX2);
                r.setY2(novoY2);

                area.atualizar();


            }
        } else {
            JPanel p1 = new JPanel(new BorderLayout(5, 5));
            JPanel labels1 = new JPanel(new GridLayout(0, 1, 2, 2));
            labels1.add(new JLabel("Desenhe uma reta na tela antes de tentar fazer essa transformação", SwingConstants.CENTER));
            p1.add(labels1,BorderLayout.WEST);
            JOptionPane.showMessageDialog(area,p1,"Messagem de erro", JOptionPane.QUESTION_MESSAGE);
            
        }
    }//GEN-LAST:event_botaoReflexaoYActionPerformed

    private void botaoReflexaoOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoReflexaoOrigemActionPerformed

        if (!retasNaTela.isEmpty()) {
            area.repaint();
            area.limpa();
        
            for (int i = 0; i < retasNaTela.size(); i ++) {
            
                Reta r = retasNaTela.get(0);
                x1 = r.getX1();
                x2 = r.getX2();
                y1 = r.getY1();
                y2 = r.getY2();
            
                int deltaX = (x2 - x1) * -1;
                int deltaY = (y2 - y1) * -1;

                int novoX2 = deltaX + x1;
                int novoY2 = deltaY + y1;

                r.dda(x1, y1, novoX2, novoY2, area.getBuffer(), Color.BLACK.getRGB());
                r.setX2(novoX2);
                r.setY2(novoY2);

                area.atualizar();


            }
        } else {
            JPanel p1 = new JPanel(new BorderLayout(5, 5));
            JPanel labels1 = new JPanel(new GridLayout(0, 1, 2, 2));
            labels1.add(new JLabel("Desenhe uma reta na tela antes de tentar fazer essa transformação", SwingConstants.CENTER));
            p1.add(labels1,BorderLayout.WEST);
            JOptionPane.showMessageDialog(area,p1,"Messagem de erro", JOptionPane.QUESTION_MESSAGE);
            
        }
    }//GEN-LAST:event_botaoReflexaoOrigemActionPerformed

    private void botaoCisalhamentoYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCisalhamentoYActionPerformed
        if (!retasNaTela.isEmpty()) {
            
            JPanel p = new JPanel(new BorderLayout(5, 5));
            JPanel labels = new JPanel(new GridLayout(0, 1, 2, 2));
            labels.add(new JLabel("Fator:", SwingConstants.RIGHT));
            p.add(labels, BorderLayout.WEST);
           

            JPanel controls = new JPanel(new GridLayout(0, 1, 2, 2));
            JTextField a = new JTextField();
            controls.add(a);
            p.add(controls, BorderLayout.CENTER);

            JOptionPane.showMessageDialog(area, p, "Cisalhamento", JOptionPane.QUESTION_MESSAGE);
            int fatorCisalhamento = Integer.parseInt(a.getText());
            
            area.repaint();
            area.limpa();
        
            for (int i = 0; i < retasNaTela.size(); i ++) {
            
                Reta r = retasNaTela.get(0);
                x1 = r.getX1();
                x2 = r.getX2();
                y1 = r.getY1();
                y2 = r.getY2();
            
                int deltaY = (y2 - y1);
                int deltaX = (x2 - x1);
 
                int novoX2 = deltaX;
                int novoY2 = deltaY + fatorCisalhamento*deltaX;
                
                //r.dda(0, 0, novoX2, novoY2, area.getBuffer());

                r.dda(x1, y1, novoX2 + x1, novoY2 + y1, area.getBuffer(), Color.BLACK.getRGB());
                r.setX2(novoX2 + x1);
                r.setY2(novoY2 + y1);

                area.atualizar();


            }
            
        } else {
            JPanel p1 = new JPanel(new BorderLayout(5, 5));
            JPanel labels1 = new JPanel(new GridLayout(0, 1, 2, 2));
            labels1.add(new JLabel("Desenhe uma reta na tela antes de tentar fazer essa transformação", SwingConstants.CENTER));
            p1.add(labels1,BorderLayout.WEST);
            JOptionPane.showMessageDialog(area,p1,"Messagem de erro", JOptionPane.QUESTION_MESSAGE);
            
        }
    }//GEN-LAST:event_botaoCisalhamentoYActionPerformed

    private void boundaryFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boundaryFillActionPerformed
        opcao = PREENCHIMENTO_BOUNDARY;
    }//GEN-LAST:event_boundaryFillActionPerformed

    private void floodFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floodFillActionPerformed
        opcao = PREENCHIMENTO_FLOOD;
    }//GEN-LAST:event_floodFillActionPerformed


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private MyPannel area;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JMenuItem botaoBresen;
    private javax.swing.JMenuItem botaoBresenhamCirc;
    private javax.swing.JMenu botaoCirc;
    private javax.swing.JMenuItem botaoCisalhamentoX;
    private javax.swing.JMenuItem botaoCisalhamentoY;
    private javax.swing.JMenuItem botaoCohen;
    private javax.swing.JMenuItem botaoDda;
    private javax.swing.JMenuItem botaoEscala;
    private javax.swing.JMenu botaoJanela;
    private javax.swing.JMenuItem botaoLiang;
    private javax.swing.JMenu botaoPreenchimento;
    private javax.swing.JMenuItem botaoReflexaoOrigem;
    private javax.swing.JMenuItem botaoReflexaoX;
    private javax.swing.JMenuItem botaoReflexaoY;
    private javax.swing.JMenu botaoReta;
    private javax.swing.JMenuItem botaoRotacao;
    private javax.swing.JMenu botaoTrans;
    private javax.swing.JMenuItem botaoTranslacao;
    private javax.swing.JMenuItem boundaryFill;
    private javax.swing.JMenuItem floodFill;
    private javax.swing.JMenu limpar;
    private javax.swing.JMenuItem liparTela;
    // End of variables declaration//GEN-END:variables
}
